}
if (third_spot() == "degree") {
output$third_choice1 <- degree_temp1
output$third_choice2 <- degree_temp2
}
if (third_spot() == "curriculum") {
output$third_choice1 <- curr_temp1
output$third_choice2 <- curr_temp2
}
if (fourth_spot() == "school") {
output$fourth_choice1 <- school_temp1
output$fourth_choice2 <- school_temp2
}
if (fourth_spot() == "occupation") {
output$fourth_choice1 <- occ_temp1
output$fourth_choice2 <- occ_temp2
}
if (fourth_spot() == "degree") {
output$fourth_choice1 <- degree_temp1
output$fourth_choice2 <- degree_temp2
}
if (fourth_spot() == "curriculum") {
output$fourth_choice1 <- curr_temp1
output$fourth_choice2 <- curr_temp2
}
})
output$degree_pref <- renderUI({
tagList(
selectInput(
inputId = "degree_preference",
label = "Degree",
choices = c(All = '', input$degree_epic),
selectize = FALSE,
size = 5,
width = '100%'
)
)
})
temp_table <- reactive({
mast_temp <- alt_title
if(!is.null(input$alt_temp)){
mast_temp <- filter(mast_temp , grepl(input$alt_temp, mast_temp$AltName, ignore.case = TRUE))
}
})
observe({
if(!is.null(input$alt_temp)){
occ_filter <- occupation %>% filter(occupation$OCCCODE %in% temp_table()$OCCCODE)
updateSelectInput(session, inputId = "occupation_epic", label = "Occupation",
choices = sort(unique(occ_filter$OCCNAME)))
}
})
table_var <- reactive ({
backbone_temp <- backbone
if(!is.null(input$occupation_preference) & input$occupation_preference !='') {
occupation_temp <- filter(occupation, OCCNAME %in% input$occupation_preference) %>% select(OCCCODE)
backbone_temp <- filter(backbone_temp, OCCCODE %in% occupation_temp)
}
if(!is.null(input$school_preference) & input$school_preference !='') {
school_temp <- filter(school, INSTNM %in% input$school_preference) %>% select(UNITID)
backbone_temp <- filter(backbone_temp, UNITID %in% school_temp)
}
if(!is.null(input$curriculum_preference) & input$curriculum_preference !='') {
curriculum_temp <- filter(cips, CIPNAME %in% input$curriculum_preference) %>% select(CIPCODE)
backbone_temp <- filter(backbone_temp, CIPCODE %in% curriculum_temp)
}
if(!is.null(input$degree_preference) & input$degree_preference !='') {
degree_temp <- filter(aw_degree, Degree_Name %in% input$degree_preference) %>% select(AWLEVEL)
backbone_temp <- filter(backbone_temp, AWLEVEL %in% degree_temp)
}
filtered_table <- left_join(backbone_temp, school, by = "UNITID")
filtered_table <- left_join(filtered_table, cips, by = "CIPCODE")
filtered_table <- left_join(filtered_table, aw_degree, by = "AWLEVEL")
filtered_table <- left_join(filtered_table, ent_degree, by = "Entry_Code")
filtered_table <- left_join(filtered_table, occupation, by = "OCCCODE")
filtered_table <- filtered_table %>% select(all_of(epic_columns))
filtered_table <- filtered_table %>% rename("Institution<br>Name" = "INSTNM",
"Curriculum<br>Name" = "CIPNAME", "Degree<br>Name" = "Degree_Name",
"Occupation<br>Name" = "OCCNAME", "Median<br>Wage" = "MedWage",
"Entry_Level<br>Degree" = "Entry_Degree")
})
observeEvent(input$make_table, {
output$table <- renderDataTable({
DT::datatable(
data = table_var(),
escape = FALSE,
options = list(
filter = FALSE,
pageLength = 5,
autoWidth = TRUE,
#columnDefs = list(list(width = '180px', targets = c(1,2,3,4,5))),
lengthMenu = c(5, 8, 10)
),
selection = list(mode = 'single')
) %>%
formatStyle(
0,
target = 'row',
color = 'black',
backgroundColor = 'grey',
fontWeight = 'bold',
lineHeight = '100%'
)
})
})
observeEvent(input$next_welcome, {
updateTabsetPanel(session, "tabs",selected = "page1")
})
observeEvent(input$next_page1, {
updateTabsetPanel(session, "tabs",selected = "page2")
})
observeEvent(input$previous_page1, {
updateTabsetPanel(session, "tabs",selected = "welcome")
})
observeEvent(input$next_page2, {
updateTabsetPanel(session, "tabs",selected = "page3")
})
observeEvent(input$previous_page2, {
updateTabsetPanel(session, "tabs",selected = "page1")
})
observeEvent(input$next_page3, {
updateTabsetPanel(session, "tabs",selected = "page4")
})
observeEvent(input$previous_page3, {
updateTabsetPanel(session, "tabs",selected = "page2")
})
observeEvent(input$next_page4, {
updateTabsetPanel(session, "tabs",selected = "page5")
})
observeEvent(input$previous_page4, {
updateTabsetPanel(session, "tabs",selected = "page3")
})
observeEvent(input$previous_page5, {
updateTabsetPanel(session, "tabs",selected = "page4")
})
output$school_loc <- renderPrint({
print(page1_list())
print(first_spot())
print(second_spot())
print(third_spot())
print(fourth_spot())
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
?sort
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(page1_order)
runApp()
c
runApp()
runApp()
runApp()
View(page1_order)
runApp()
runApp()
runApp()
runApp()
runApp()
View(page1_order)
runApp()
View(page1_order)
runApp()
View(page1_order)
Q
runApp()
Q
runApp()
?reactive
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(alt_title)
unique(alt_title$OCCCODE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(school)
readUSstateAbbreviations()
data(USstateAbbreviations)
state.name
View(school)
unique(school$STABBR)
state.abb
#cnames <- readRDS("Column_names.rds")
#degrees <- readRDS("Degrees.rds")
state_abbr <- read_csv("Book1.csv")
View(state_abbr)
saveRDS(state_abbr, "state_abbr.rds")
#cnames <- readRDS("Column_names.rds")
#degrees <- readRDS("Degrees.rds")
#state_abbr <- read_csv("Book1.csv")
#saveRDS(state_abbr, "state_abbr.rds")
state_abbr <- readRDS("state_abbr.rds")
View(state_abbr)
runApp()
runApp()
runApp()
runApp()
runApp()
View(alt_title)
runApp()
View(alt_title)
runApp()
runApp()
bsExample("Collapses")
runApp()
runApp()
?jqui_sortable()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderUI
?tagList
runApp()
shiny::runApp()
View(state_abbr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?bsPopover
runApp()
runApp()
runApp()
?textInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?updateSelectInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?grepl
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(school_filter)
Q
?select
runApp()
runApp()
runApp()
View(school_filter)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?actionBttn
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?rbind
?remove
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
school_list
Q
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
?updateSelectInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(school)
length(school)
runApp()
school_back()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(filtered_table)
Q
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
n
runApp()
runApp()
runApp()
View(cips)
View(cips)
runApp()
runApp()
runApp()
runApp()
View(aw_degree)
runApp()
runApp()
runApp()
runApp()
degree_table()
View(degree_filter)
runApp()
runApp()
runApp()
View(aw_degree)
runApp()
runApp()
View(aw_degree)
?select
View(aw_degree)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?actionBttn
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?all_of
runApp()
runApp()
?select
runApp()
runApp()
